name: Run Processor

on:
  workflow_dispatch:

  # To run the processor every time relevant files are pushed, uncomment the lines below:
  # push:
  #   paths:
  #     - 'tabular_data/config/**'
  #     - 'tabular_data/_global_config.py'
  #     - 'tabular_data/processor.py'
  #     - 'tabular_data/processor_helpers.py'
  #     - 'tabular_data/requirements.txt'
  #     - 'collections/**'
  #     - '*.xml'

  # The processor runs automatically at 03:30 UTC every Monday:
  schedule:
    - cron: '30 3 * * 1'

jobs:
  process:
    runs-on: ubuntu-latest

    env:
      LC_ALL: en_GB.UTF-8
      LANG: en_GB.UTF-8

    permissions:
      contents: write

    steps:
      - name: Checkout full repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up locale
        run: |
          sudo apt-get update
          sudo apt-get install -y locales
          sudo locale-gen en_GB.UTF-8
          sudo update-locale LANG=en_GB.UTF-8

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd tabular_data
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run processor
        run: |
          cd tabular_data
          source .venv/bin/activate
          python processor.py

      - name: Commit output changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Stash current uncommitted changes
          git stash push --include-untracked --quiet

          # Update branch with remote changes
          git fetch origin main
          git pull --rebase origin main || git rebase --skip

          # Restore the stashed changes
          git stash pop --quiet || true

          # Force our version of the output folder to win conflicts
          if ! git checkout --ours tabular_data/output 2>/dev/null; then
            echo "No conflicts in tabular_data/output"
          else
            echo "Overriding manual changes to tabular_data/output"
            OVERRIDDEN=true
          fi

          # Stage only the output folder
          git add -f tabular_data/output

          # Commit if there are changes
          if ! git diff --quiet || ! git diff --staged --quiet; then
            if [ "$OVERRIDDEN" = true ]; then
              git commit -m "Update output from processor (overrode manual changes)"
            else
              git commit -m "Update output from processor"
            fi
          fi

          # Push changes
          git push
